{% extends 'layout.html.twig' %}

{% block title %}Index{% endblock %}

{% block stylesheet %}
    <style>
        #right-panel {
            font-family: 'Roboto','sans-serif';
            line-height: 30px;
            padding-left: 10px;
        }

        #right-panel select, #right-panel input {
            font-size: 15px;
        }

        #right-panel select {
            width: 100%;
        }

        #right-panel i {
            font-size: 12px;
        }
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #map {
            height: 50%;
            width: 50%;
            margin-top: 20px;
            margin-bottom: 20px;
        }
        #right-panel {
            float: right;
            width: 48%;
            padding-left: 2%;
        }
        #output {
            font-size: 21px;
            color: orange;
        }
        .display-none {
            display: none;
        }
        .row {
            width: 600px;
            list-style: none;
            float: right;
        }
        .row li {
            margin: 5px 5px 5px 5px;
        }
        .row li a {
            color: #FFF !important;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="row">
    {% for bonbon, key in inventory %}
        <li><a href="/child/select/{{ key }}">{{ bonbon }}</a></li>
    {% endfor %}
    </div>

    <div class="row text-center display-none">
        {% if adresses is empty %}
            <p class="badge badge-secondary">No adresse in DB</p>
        {% else %}
            <table class="table table-hover table-sm table-striped table-dark">
                <thead>
                <tr>
                    <th scope="col">Location</th>
                </tr>
                </thead>
                <tbody>
                {% for adresse in adresses %}
                    <tr>
                            <td id="{{ adresse.id }}">{{ adresse.location }}</td>
                    </tr>
                {% endfor %}
                </tbody>
            </table>
        {% endif %}
    </div>

    <div>
        <strong>Results</strong>
        </div>
    <div id="output"></div>
    </div>
    <div id="map"></div>

    <a href="/disconnect"><button type="button" class="btn btn-warning">Se déconnecter</button></a>
{% endblock %}
{% block javascripts %}
    <script>
        function initMap() {

            let bounds = new google.maps.LatLngBounds;
            let markersArray = [];

            let origin = "3 bis rue Ambroise Paré, Lille, France";

            let destinations = [];
            {% for adresse in adresses %}
                destinations.push(document.getElementById('{{ adresse.id }}').textContent);
            {% endfor %}

            let destinationIcon = 'https://chart.googleapis.com/chart?' +
                'chst=d_map_pin_letter&chld=D|FF0000|000000';
            let originIcon = 'https://chart.googleapis.com/chart?' +
                'chst=d_map_pin_letter&chld=O|FFFF00|000000';
            let map = new google.maps.Map(document.getElementById('map'), {
                center: {lat: 55.53, lng: 9.4},
                zoom: 13,
                gestureHandling: 'cooperative'

            });
            let geocoder = new google.maps.Geocoder;

            let service = new google.maps.DistanceMatrixService;
            service.getDistanceMatrix({
                origins: [origin],
                destinations: destinations,
                travelMode: 'DRIVING',
                unitSystem: google.maps.UnitSystem.METRIC,
                avoidHighways: false,
                avoidTolls: false
            }, function(response, status) {
                if (status !== 'OK') {
                    alert('Error was: ' + status);
                } else {
                    let originList = response.originAddresses;
                    let destinationList = response.destinationAddresses;
                    let outputDiv = document.getElementById('output');
                    outputDiv.innerHTML = '';
                    deleteMarkers(markersArray);

                    let showGeocodedAddressOnMap = function(asDestination) {
                        let icon = asDestination ? destinationIcon : originIcon;
                        return function(results, status) {
                            if (status === 'OK') {
                                map.fitBounds(bounds.extend(results[0].geometry.location));
                                markersArray.push(new google.maps.Marker({
                                    map: map,
                                    position: results[0].geometry.location,
                                    icon: icon
                                }));
                            } else {
                                alert('Geocode was not successful due to: ' + status);
                            }
                        };
                    };

                    for (let i = 0; i < originList.length; i++) {
                        let results = response.rows[i].elements;
                        geocoder.geocode({'address': originList[i]},
                            showGeocodedAddressOnMap(false));
                        for (let j = 0; j < results.length; j++) {
                            let replace = destinationList[j].replace(/ /g, "+");
                            geocoder.geocode({'address': destinationList[j]},
                                showGeocodedAddressOnMap(true));
                            outputDiv.innerHTML += destinationList[j] +
                                ': ' + results[j].distance.text + '<br>';
                            if (results[j].distance.value < 50) {
                                outputDiv.innerHTML += 'Tu es arrivé au ' + destinationList[j] + '<a href="/child/adresse/'+replace+'">'+ '  ' + 'Récupérer les bonbons' + '<a/>' + "<br />";
                            }
                        }
                    }
                }
            });


        }

        function deleteMarkers(markersArray) {
            for (let i = 0; i < markersArray.length; i++) {
                markersArray[i].setMap(null);
            }
            markersArray = [];
        }
    </script>
    <script async defer
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC7er1lZUvaZlQ9Fl6-THddiMWwsJonaxg&callback=initMap">
    </script>
{% endblock %}